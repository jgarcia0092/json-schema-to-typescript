// Generated by dts-bundle v0.5.0

export function compile(schema: JSONSchema.Schema, path: string | undefined, settings?: TsType.TsTypeSettings): string;
export function compileFromFile(inputFilename: string): Promise<string | Error>;

export namespace JSONSchema {
    type SimpleTypes = "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
    /** Core schema meta-schema */
    type HttpJsonSchemaOrgDraft04Schema = {
        id?: string;
        $schema?: string;
        title?: string;
        description?: string;
        default?: any;
        multipleOf?: number;
        maximum?: number;
        exclusiveMaximum?: boolean;
        minimum?: number;
        exclusiveMinimum?: boolean;
        maxLength?: number;
        minLength?: number;
        pattern?: string;
        additionalItems?: boolean | HttpJsonSchemaOrgDraft04Schema;
        items?: HttpJsonSchemaOrgDraft04Schema | HttpJsonSchemaOrgDraft04Schema[];
        maxItems?: number;
        minItems?: number;
        uniqueItems?: boolean;
        maxProperties?: number;
        minProperties?: number;
        required?: string[];
        additionalProperties?: boolean | HttpJsonSchemaOrgDraft04Schema;
        definitions?: {
            [k: string]: HttpJsonSchemaOrgDraft04Schema;
        };
        properties?: {
            [k: string]: HttpJsonSchemaOrgDraft04Schema;
        };
        patternProperties?: {
            [k: string]: HttpJsonSchemaOrgDraft04Schema;
        };
        dependencies?: {
            [k: string]: HttpJsonSchemaOrgDraft04Schema | string[];
        };
        enum?: any[];
        tsEnumNames?: string[];
        type?: SimpleTypes | SimpleTypes[];
        allOf?: HttpJsonSchemaOrgDraft04Schema[];
        anyOf?: HttpJsonSchemaOrgDraft04Schema[];
        oneOf?: HttpJsonSchemaOrgDraft04Schema[];
        not?: HttpJsonSchemaOrgDraft04Schema;
        [k: string]: any;
    };
    type Schema = HttpJsonSchemaOrgDraft04Schema & {
        $ref?: string;
    };
}

export namespace TsType {
    interface TsTypeSettings {
        declarationDescription?: boolean;
        declareReferenced?: boolean;
        declareSimpleType?: boolean;
        endPropertyWithSemicolon?: boolean;
        endTypeWithSemicolon?: boolean;
        propertyDescription?: boolean;
        useConstEnums?: boolean;
        useFullReferencePathAsName?: boolean;
        useInterfaceDeclaration?: boolean;
    }
    var DEFAULT_SETTINGS: TsTypeSettings;
    abstract class TsTypeBase {
        id?: string;
        description?: string;
        protected safeId(): string | undefined;
        protected toBlockComment(settings: TsTypeSettings): string;
        protected _toDeclaration(decl: string, settings: TsTypeSettings): string;
        protected abstract _type(settings: TsTypeSettings): string;
        isSimpleType(): boolean;
        toDeclaration(settings: TsTypeSettings): string;
        toSafeType(settings: TsTypeSettings): string;
        toType(settings: TsTypeSettings): string;
        toString(): string;
    }
    interface TsProp {
        name: string;
        required: boolean;
        type: TsTypeBase;
    }
    class Any extends TsTypeBase {
        _type(): string;
    }
    class String extends TsTypeBase {
        _type(): string;
    }
    class Boolean extends TsTypeBase {
        _type(): string;
    }
    class Number extends TsTypeBase {
        _type(): string;
    }
    class Object extends TsTypeBase {
        _type(): string;
    }
    class Void extends TsTypeBase {
        _type(): string;
    }
    class Literal extends TsTypeBase {
        constructor(value: any);
        _type(): any;
    }
    class EnumValue {
        identifier: string;
        value: string;
        constructor(enumValues: string[]);
        toDeclaration(): string;
        toString(): string;
    }
    class Enum extends TsTypeBase {
        enumValues: EnumValue[];
        constructor(enumValues: EnumValue[]);
        isSimpleType(): boolean;
        _type(settings: TsTypeSettings): string;
        toSafeType(settings: TsTypeSettings): string;
        toDeclaration(settings: TsTypeSettings): string;
    }
    class Array extends TsTypeBase {
        constructor(type?: TsTypeBase);
        _type(settings: TsTypeSettings): string;
    }
    class Intersection extends TsTypeBase {
        protected data: TsTypeBase[];
        constructor(data: TsTypeBase[]);
        isSimpleType(): boolean;
        _type(settings: TsTypeSettings): string;
        toSafeType(settings: TsTypeSettings): string;
    }
    class Union extends Intersection {
        isSimpleType(): boolean;
        _type(settings: TsTypeSettings): string;
    }
    class Interface extends TsTypeBase {
        constructor(props: TsProp[]);
        static reference(id: string): Interface;
        protected _type(settings: TsTypeSettings, declaration?: boolean): string;
        isSimpleType(): boolean;
        toDeclaration(settings: TsTypeSettings): string;
    }
}

